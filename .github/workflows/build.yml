name: SonarQube

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Test and Analyze
    runs-on: windows-latest
    steps:
      # 1️⃣ Configurar JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"

      # 2️⃣ Hacer checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 3️⃣ Cache para SonarQube
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # 4️⃣ Instalar SonarQube Scanner si no está en cache
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner

      # 5️⃣ Build, Test y Análisis SonarQube con cobertura
      - name: Build, Test and Analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # Iniciar SonarQube scanner
          ${{ runner.temp }}\scanner\dotnet-sonarscanner begin /k:"zetacean_Backend-TestAutomation-Proof" /o:"zetacean" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="TestResults/**/coverage.cobertura.xml"

          # Build del proyecto
          dotnet build

          # Ejecutar tests y generar cobertura
          dotnet test --collect:"XPlat Code Coverage" --results-directory:"TestResults"

          # Finalizar análisis SonarQube
          ${{ runner.temp }}\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
